#!/bin/sh
#
#	Resource Agent for BOOTH site daemon.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

#######################################################################
# Initialization:

. ${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="booth-site" version="0.9">
<version>1.0</version>

<longdesc lang="en">
This Resource Agent can control the BOOTH site daemon.
It assumes that the binary boothd is in your default PATH.
In most cases, it should be run as a primitive resource.
</longdesc>
<shortdesc lang="en">BOOTH site daemon</shortdesc>

<parameters>

<parameter name="args" unique="1">
<longdesc lang="en">
Any additional options to start the BOOTH daemon with
</longdesc>
<shortdesc lang="en">BOOTH Options</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="type" unique="1">
<longdesc lang="en">
The type of BOOTH daemon which should be started
</longdesc>
<shortdesc lang="en">BOOTH Type</shortdesc>
<content type="string" default="site" />
</parameter>

<parameter name="daemon" unique="1">
<longdesc lang="en">
The daemon to start
</longdesc>
<shortdesc lang="en">The daemon to start</shortdesc>
<content type="string" default="boothd" />
</parameter>

</parameters>

<actions>
<action name="start"        timeout="90" />
<action name="stop"         timeout="100" />
<action name="monitor"      timeout="20" interval="10" depth="0" start-delay="0" />
<action name="meta-data"    timeout="5" />
<action name="validate-all"   timeout="30" />
</actions>
</resource-agent>
END
}

#######################################################################

booth_usage() {
	cat <<END
usage: $0 {start|stop|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

booth_start() {
    booth_monitor; rc=$?

    case $rc in
      $OCF_SUCCESS)     return $OCF_SUCCESS;;
      $OCF_NOT_RUNNING) ;;
      *) return $OCF_ERR_GENERIC;;
    esac

    ${OCF_RESKEY_daemon} $OCF_RESKEY_type $OCF_RESKEY_args

    sleep 1
    booth_monitor
}

booth_stop() {
    booth_monitor; rc=$?

    if [ $rc = $OCF_NOT_RUNNING ]; then
	return $OCF_SUCCESS
    fi

    killall -TERM ${OCF_RESKEY_daemon}; rc=$?

    if [ $rc != 0 ]; then
	return $OCF_ERR_GENERIC
    fi

    rc=$OCF_SUCCESS
    while [ $rc = $OCF_SUCCESS ]; do
	booth_monitor; rc=$?
	sleep 1
    done

    if [ $rc = $OCF_NOT_RUNNING ]; then
    	rc=$OCF_SUCCESS
    fi

    return $rc
}

booth_monitor() {
    killall -0 ${OCF_RESKEY_daemon}; rc=$?

    case $rc in
      0) return $OCF_SUCCESS;;
      1) return $OCF_NOT_RUNNING;;
      *) return $OCF_ERR_GENERIC;;
    esac
}

booth_validate() {
    check_binary ${OCF_RESKEY_daemon}

    case ${OCF_RESKEY_CRM_meta_globally_unique} in
	yes|Yes|true|True|1) 
	    ocf_log err "$OCF_RESOURCE_INSTANCE must be configured with the globally_unique=false meta attribute"
	    exit $OCF_ERR_CONFIGURED
	    ;;
    esac

    return $OCF_SUCCESS
}

# Set OCF_RESKEY_daemon to boothd as default if not set
if [ ! ${OCF_RESKEY_daemon} ]; then
    OCF_RESKEY_daemon=boothd
fi
# Set OCF_RESKEY_type to site as default if not set
if [ ! ${OCF_RESKEY_type} ]; then
    OCF_RESKEY_type=site
fi

case $__OCF_ACTION in
meta-data)	meta_data
		exit $OCF_SUCCESS
		;;
start)		booth_validate; booth_start;;
stop)		booth_stop;;
monitor)	booth_validate; booth_monitor;;
validate-all)	booth_validate;;
usage|help)	booth_usage
		exit $OCF_SUCCESS
		;;
*)		booth_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
rc=$?

exit $rc

